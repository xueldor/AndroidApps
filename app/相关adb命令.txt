进入adb shell，
查看所有app，包括disable，不包括hide的: pm list packages
仅查看状态为disable的apk： pm list packages -d
仅查看状态为hide的apk：没有相关命令
查看所有app，包括disable和hide的 ： pm list packages -u
查看时打印apk路径: pm list packages -f

enable/disable: 组件是否可用。如果整个application设置为disable，app将被禁用，用各种方式都无法运行，但是系统仍然安装了此应用，所以pm list packages能查到
hide/unhide: 如果package处于一个hidden状态，就仿佛已经卸载，不可用，但是数据(如/data/data/*)，和apk文件本身，都还在。
已经hide的应用，通过unhide操作，或者installExistingPackage，可以恢复。

(com.xx.xxxx代指需要操作的应用包名)
pm hide com.xx.xxxx
pm disable com.xx.xxxx
pm disable-user com.xx.xxxx
解除：
pm enable com.xx.xxxx(对应disable和disable-user)
pm unhide com.xx.xxxx

需要的权限：
1、root用户拥有所有权限
2、可能手机厂商做了定制，一般来说，
pm disable,需要system用户(sharedUserId="android.uid.system")
pm disable-user/enable,shell用户就可以
pm unhide/hide：需要MANAGE_USERS权限，shell用户无法执行,如果在app里面调用，需将此app设置为device-owner，参考本应用
(Android提供的三种权限管理策略的能力大小依次为 DeviceAdmin < ProfileOwner < DeviceOwner,其中一台机器可以有许多DeviceAdmin，而DeviceOwner只能有一个，并且只能通过adb shell来设置)

如果没有权限，将抛出的异常举例：
java.lang.SecurityException: Neither user 2000 nor current process has android.permission.MANAGE_USERS
java.lang.SecurityException: Shell cannot change component state for com.xx.xxxx/null to 2

相关的api接口：
android.content.pm.PackageManager#setApplicationEnabledSetting
android.content.pm.PackageManager#getApplicationEnabledSetting

android.content.pm.PackageManager#setApplicationHiddenSettingAsUser
android.content.pm.PackageManager#getApplicationHiddenSettingAsUser
android.app.admin.DevicePolicyManager#isApplicationHidden(其实源码里就是调用 getApplicationHiddenSettingAsUser)
android.app.admin.DevicePolicyManager#setApplicationHidden(其实源码里就是调用 setApplicationHiddenSettingAsUser)

